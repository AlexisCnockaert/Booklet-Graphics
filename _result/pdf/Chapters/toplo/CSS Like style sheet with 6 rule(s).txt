CSS Like style sheet with 6 rule(s)
###
#'Space root' {
	a ToPropertyWriter write:  background when: ToInstallLookEvent with: [ :e | e tokenValueNamed: #'background-color' ]

}
ToLabel {
	a ToPropertyWriter write:  text-attributes-with-builder when: ToInstallLookEvent with: [ :e |
				e textAttributesBuilder
					weight: (e tokenValueNamed: #'font-weight-strong');
					defaultFontName: (e tokenValueNamed: #'font-family-code');
					defaultFontSize: (e tokenValueNamed: #'font-size');
					lineSpacing: (e tokenValueNamed: #'line-height');
					yourself ]
	a ToPropertyWriter write:  text-attributes-with-builder when: ToDisabledLookEvent with: [ :e |
				e textAttributesBuilder foreground:
					(e tokenValueNamed: #'color-text-disabled') ]

}
ToLabel .H1 {
	a ToPropertyWriter supplement:  text-attributes-with-builder when: ToInstallLookEvent with: [ :e |
					e textAttributesBuilder
						defaultFontSize: (e tokenValueNamed: #'font-size-H1');
						lineSpacing: (e tokenValueNamed: #'line-height-H1');
						yourself ]

}
ToLabel .H2 {
	a ToPropertyWriter supplement:  text-attributes-with-builder when: ToInstallLookEvent with: [ :e |
					e textAttributesBuilder
						defaultFontSize: (e tokenValueNamed: #'font-size-H2');
						lineSpacing: (e tokenValueNamed: #'line-height-H2');
						yourself ]

}
ToLabel .H3 {
	a ToPropertyWriter supplement:  text-attributes-with-builder when: ToInstallLookEvent with: [ :e |
					e textAttributesBuilder
						defaultFontSize: (e tokenValueNamed: #'font-size-H3');
						lineSpacing: (e tokenValueNamed: #'line-height-H3');
						yourself ]

}
ToLabel .H4 {
	a ToPropertyWriter supplement:  text-attributes-with-builder when: ToInstallLookEvent with: [ :e |
					e textAttributesBuilder
						defaultFontSize: (e tokenValueNamed: #'font-size-H4');
						lineSpacing: (e tokenValueNamed: #'line-height-H4');
						yourself ]

}
ToLabel .H5 {
	a ToPropertyWriter supplement:  text-attributes-with-builder when: ToInstallLookEvent with: [ :e |
					e textAttributesBuilder
						defaultFontSize: (e tokenValueNamed: #'font-size-H5');
						lineSpacing: (e tokenValueNamed: #'line-height-H5');
						yourself ]

}
ToLabel .default {
	a ToPropertyWriter supplement:  text-attributes-with-builder when: ToInstallLookEvent with: [ :e |
					e textAttributesBuilder
						foreground: (e tokenValueNamed: #'color-text');
						yourself ]

}
ToLabel .danger {
	a ToPropertyWriter supplement:  text-attributes-with-builder when: ToInstallLookEvent with: [ :e |
					e textAttributesBuilder
						foreground: (e tokenValueNamed: #'color-error');
						yourself ]

}
ToLabel .link {
	a ToPropertyWriter supplement:  text-attributes-with-builder when: ToInstallLookEvent with: [ :e |
					e textAttributesBuilder
						foreground: (e tokenValueNamed: #'color-link');
						yourself ]

}
ToLabel .primary {
	a ToPropertyWriter supplement:  text-attributes-with-builder when: ToInstallLookEvent with: [ :e |
					e textAttributesBuilder
						foreground: (e tokenValueNamed: #'color-text-light-solid');
						yourself ]

}
ToLabel .secondary {
	a ToPropertyWriter supplement:  text-attributes-with-builder when: ToInstallLookEvent with: [ :e |
					e textAttributesBuilder
						foreground: (e tokenValueNamed: #'color-text-secondary');
						yourself ]

}
ToLabel .success {
	a ToPropertyWriter supplement:  text-attributes-with-builder when: ToInstallLookEvent with: [ :e |
					e textAttributesBuilder
						foreground: (e tokenValueNamed: #'color-success');
						yourself ]

}
ToLabel .warning {
	a ToPropertyWriter supplement:  text-attributes-with-builder when: ToInstallLookEvent with: [ :e |
					e textAttributesBuilder
						foreground: (e tokenValueNamed: #'color-warning');
						yourself ]

}
.button > .labeled-icon {
	a ToPropertyWriter write:  layout when: ToInstallLookEvent with: [ :e | BlLinearLayout horizontal]
	a ToPropertyWriter write:  layout-constraints when: ToInstallLookEvent with: [ :e |
				[ :c |
				c horizontal fitContent.
				c vertical fitContent.
				c linear vertical alignCenter.
				c linear horizontal alignCenter ] ]

}
.button > .labeled-icon:not(.flexible > .button > .labeled-icon) {
	a ToPropertyWriter write:  layout-constraints when: ToInstallLookEvent with: [ :e |
						[ :c |
						c frame vertical alignCenter.
						c frame horizontal alignCenter.
						c linear vertical alignCenter.
						c linear horizontal alignCenter ] ]

}
.button > .labeled-icon.flexible > .button > .labeled-icon {
	a ToPropertyWriter write:  layout-constraints when: ToInstallLookEvent with: [ :e |
						[ :c |
						c horizontal matchParent.
						c vertical matchParent ] ]

}
.button > .labeled-icon.icon-first > .button > .labeled-icon {
	a ToPropertyWriter write:  layout-direction when: ToInstallLookEvent with: [ :e | BlLayoutDirection leftToRight ]

}
.button > .labeled-icon.label-first > .button > .labeled-icon {
	a ToPropertyWriter write:  layout-direction when: ToInstallLookEvent with: [ :e | BlLayoutDirection rightToLeft ]

}
ToButton {
	a ToPropertyWriter write:  mouseCursor when: ToHoveredLookEvent with: [ :e |
				e isEnabled
					ifTrue: [ BlCursor hand ]
					ifFalse: [  ] ]
	a ToPropertyWriter write:  mouseCursor when: ToLeavedLookEvent with: nil

}
ToButton:not(.vertical) {
	a ToPropertyWriter write:  padding when: ToInstallLookEvent with: [ :e |
				BlInsets
					top: (e tokenValueNamed: #'padding-XS') / 2
					left: (e tokenValueNamed: #'padding-content-H') / 2
					bottom: (e tokenValueNamed: #'padding-XS') / 2
					right: (e tokenValueNamed: #'padding-content-H') / 2 ]

}
ToButton:not(.vertical):not([ :e | e constraints vertical resizer isExact ]) {
	a ToPropertyWriter write:  height when: ToInstallLookEvent with: [ :e | e tokenValueNamed: #'control-height' ]

}
ToButton:not(.vertical) .large-sizing {
	a ToPropertyWriter write:  height when: ToInstallLookEvent with: [ :e | e tokenValueNamed: #'control-height-LG' ]

}
ToButton:not(.vertical) .small-sizing {
	a ToPropertyWriter write:  height when: ToInstallLookEvent with: [ :e | e tokenValueNamed: #'control-height-SM' ]

}
ToButton:not(.circle) {
	a ToPropertyWriter write:  geometry when: ToInstallLookEvent with: [ :e |
				BlRoundedRectangleGeometry cornerRadius:
					(e tokenValueNamed: 'border-radius') ]

}
ToButton:not(.circle) .round {
	a ToPropertyWriter write:  geometry when: ToInstallLookEvent with: [ :e |
					BlRoundedRectangleGeometry cornerRadius: e requestedHeight ]

}
ToButton {
	a ToPropertyWriter write:  background-color when: ToInstallLookEvent with: [ :e | e tokenValueNamed: #'' ]
	a ToPropertyWriter write:  background-color when: ToDisabledLookEvent with: [ :e | e tokenValueNamed: #'color-bg-container-disabled' ]
	a ToPropertyWriter write:  button-label-text-foreground when: ToInstallLookEvent with: [ :e | e tokenValueNamed: #'color-text' ]
	a ToPropertyWriter write:  button-label-text-foreground when: ToLeavedLookEvent with: [ :e | e tokenValueNamed: #'color-text' ]
	a ToPropertyWriter write:  button-label-text-foreground when: ToDisabledLookEvent with: [ :e | e tokenValueNamed: #'color-text-disabled' ]
	a ToPropertyWriter write:  button-label-text-foreground when: ToHoveredLookEvent with: [ :e | e tokenValueNamed: #'color-primary' ]
	a ToPropertyWriter write:  button-label-text-foreground when: ToPressedLookEvent with: [ :e | e tokenValueNamed: #'color-primary-pressed' ]

}
ToButton:not(.primary) {
	a ToPropertyWriter write:  border when: ToInstallLookEvent with: [ :e |
					BlBorder
						paint: (e tokenValueNamed: #'color-border')
						width: (e tokenValueNamed: #'line-width') ]
	a ToPropertyWriter write:  border when: ToLeavedLookEvent with: [ :e |
					BlBorder
						paint: (e tokenValueNamed: #'color-border')
						width: (e tokenValueNamed: #'line-width') ]
	a ToPropertyWriter write:  border when: ToDisabledLookEvent with: [ :e |
					BlBorder
						paint: (e tokenValueNamed: #'color-border-disabled')
						width: (e tokenValueNamed: #'line-width') ]
	a ToPropertyWriter write:  border when: ToHoveredLookEvent with: [ :e |
					BlBorder
						paint: (e tokenValueNamed: #'color-primary-hover')
						width: (e tokenValueNamed: #'line-width') ]
	a ToPropertyWriter write:  border when: ToClickedLookEvent with: [ :e |
					BlBorder
						paint: (e tokenValueNamed: #'color-primary-hover')
						width: (e tokenValueNamed: #'line-width') ]
	a ToPropertyWriter write:  border when: ToPressedLookEvent with: [ :e |
					BlBorder
						paint: (e tokenValueNamed: #'color-primary-pressed')
						width: (e tokenValueNamed: #'line-width') ]

}
ToButton .dashed {
	a ToPropertyWriter supplement:  border-with-builder when: ToInstallLookEvent with: [ :e |
				e borderBuilder dashArray: (e tokenValueNamed: #'dash-array') ]

}
ToButton.primary {
	a ToPropertyWriter write:  background-color when: ToInstallLookEvent with: [ :e | e tokenValueNamed: #'color-primary' ]
	a ToPropertyWriter write:  background-color when: ToLeavedLookEvent with: [ :e | e tokenValueNamed: #'color-primary' ]
	a ToPropertyWriter write:  background-color when: ToDisabledLookEvent with: [ :e | e tokenValueNamed: #'color-bg-container-disabled' ]
	a ToPropertyWriter write:  background-color when: ToHoveredLookEvent with: [ :e | e tokenValueNamed: #'color-primary-hover' ]
	a ToPropertyWriter write:  background-color when: ToPressedLookEvent with: [ :e | e tokenValueNamed: #'color-primary-pressed' ]
	a ToPropertyWriter write:  border-with-builder when: ToInstallLookEvent with: [ :e |
					e borderBuilder
						paint: Color transparent;
						width: (e tokenValueNamed: #'line-width') ]
	a ToPropertyWriter write:  border-with-builder when: ToLeavedLookEvent with: [ :e |
					e borderBuilder
						paint: Color transparent;
						width: (e tokenValueNamed: #'line-width') ]
	a ToPropertyWriter write:  border-with-builder when: ToDisabledLookEvent with: [ :e |
					e borderBuilder
						paint: (e tokenValueNamed: #'color-border-disabled');
						width: (e tokenValueNamed: #'line-width') ]
	a ToPropertyWriter write:  button-label-text-foreground when: ToInstallLookEvent with: [ :e | e tokenValueNamed: #'color-text-light-solid' ]
	a ToPropertyWriter write:  button-label-text-foreground when: ToLeavedLookEvent with: [ :e | e tokenValueNamed: #'color-text-light-solid' ]
	a ToPropertyWriter write:  button-label-text-foreground when: ToDisabledLookEvent with: [ :e | e tokenValueNamed: #'color-text-disabled' ]
	a ToPropertyWriter write:  button-label-text-foreground when: ToHoveredLookEvent with: [ :e | e tokenValueNamed: #'color-text-light-solid' ]
	a ToPropertyWriter write:  button-label-text-foreground when: ToPressedLookEvent with: [ :e | e tokenValueNamed: #'color-text-light-solid' ]

}
